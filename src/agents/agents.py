import sys
from pathlib import Path
from typing import Dict, Optional

import google.generativeai as genai
from src.core.config import GEMINI_API_KEY, INSTRUCTION_DIR

# API anahtarÄ±nÄ± ayarla
genai.configure(api_key=GEMINI_API_KEY)


def load_project_description(file_path: str) -> str:
    """
    Proje aÃ§Ä±klama dosyasÄ±nÄ± yÃ¼kler.
    
    Args:
        file_path: Proje aÃ§Ä±klama dosyasÄ±nÄ±n yolu
        
    Returns:
        Proje aÃ§Ä±klamasÄ± metni
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read().strip()
    except Exception as e:
        raise Exception(f"Proje aÃ§Ä±klama dosyasÄ± yÃ¼klenirken hata oluÅŸtu: {str(e)}")


class Agent:
    """LLM tabanlÄ± bir AI ajanÄ±."""
    
    def __init__(self, name: str, role: str, instruction_file: Optional[str] = None):
        """
        Args:
            name: AjanÄ±n adÄ±
            role: AjanÄ±n rolÃ¼
            instruction_file: AjanÄ±n talimatlarÄ±nÄ± iÃ§eren dosya 
        """
        self.name = name
        self.role = role
        self.instructions = ""
        
        # Talimat dosyasÄ± verildiyse yÃ¼kle
        if instruction_file:
            try:
                instruction_path = Path(INSTRUCTION_DIR) / instruction_file
                with open(instruction_path, 'r', encoding='utf-8') as f:
                    self.instructions = f.read().strip()
            except Exception as e:
                print(f"UyarÄ±: {instruction_file} dosyasÄ± yÃ¼klenirken hata oluÅŸtu: {str(e)}")
    
    def query(self, prompt: str) -> str:
        """
        Ajana bir soru sorar ve yanÄ±t alÄ±r.
        
        Args:
            prompt: Ajana sorulacak soru/istek
            
        Returns:
            AjanÄ±n yanÄ±tÄ±
        """
        try:
            model = genai.GenerativeModel('gemini-2.0-flash-exp')
            
            # TalimatlarÄ± ve prompu birleÅŸtir
            full_prompt = f"{self.instructions}\n\n{prompt}" if self.instructions else prompt
            
            response = model.generate_content(full_prompt)
            return response.text
        except Exception as e:
            error_msg = f"{self.name} ajanÄ±ndan yanÄ±t alÄ±nÄ±rken hata oluÅŸtu: {str(e)}"
            print(error_msg, file=sys.stderr)
            return f"[Hata: {error_msg}]"


class ProjectTeam:
    """Proje ekibi sÄ±nÄ±fÄ±."""
    
    def __init__(self):
        """Proje ekibini oluÅŸturur."""
        self.project_manager = None
        self.ux_designer = None 
        self.software_architect = None
        self.team_leader = None
    
    def initialize_agents(self):
        """TÃ¼m ajanlarÄ± baÅŸlatÄ±r."""
        self.project_manager = Agent(
            name="Proje YÃ¶neticisi",
            role="Proje planlama ve yÃ¶netim uzmanÄ±",
            instruction_file="project_manager_instructions.txt"
        )
        
        self.ux_designer = Agent(
            name="UX TasarÄ±mcÄ±sÄ±",
            role="KullanÄ±cÄ± deneyimi ve arayÃ¼z tasarÄ±m uzmanÄ±",
            instruction_file="ux_designer_instructions.txt"
        )
        
        self.software_architect = Agent(
            name="YazÄ±lÄ±m MimarÄ±",
            role="Teknik mimari ve yazÄ±lÄ±m geliÅŸtirme uzmanÄ±",
            instruction_file="software_architect_instructions.txt"
        )
        
        self.team_leader = Agent(
            name="Ekip Lideri",
            role="Ekip koordinasyonu ve genel proje yÃ¶netimi",
            instruction_file="team_leader_instructions.txt"
        )
    
    def simulate_discussion(self, project_description: str) -> Dict[str, str]:
        """
        Ajanlar arasÄ±nda bir tartÄ±ÅŸma simÃ¼lasyonu yapar.
        
        Args:
            project_description: Proje aÃ§Ä±klamasÄ±
            
        Returns:
            Her ajanÄ±n yanÄ±tlarÄ±nÄ± iÃ§eren sÃ¶zlÃ¼k
        """
        responses = {}
        
        # TÃ¼m gerekli ajanlarÄ±n baÅŸlatÄ±ldÄ±ÄŸÄ±ndan emin ol
        if not all([self.project_manager, self.ux_designer, self.software_architect]):
            raise Exception("TÃ¼m ajanlar baÅŸlatÄ±lmadÄ±.")
        
        # Proje YÃ¶neticisi'nin gÃ¶rÃ¼ÅŸÃ¼nÃ¼ al
        print("ğŸ”„ Proje YÃ¶neticisi analiz yapÄ±yor...")
        pm_prompt = f"""
        Proje AÃ§Ä±klamasÄ±:
        {project_description}
        
        LÃ¼tfen bu proje iÃ§in detaylÄ± bir proje yÃ¶netim planÄ± oluÅŸturun.
        """
        responses['project_manager'] = self.project_manager.query(pm_prompt)
        print("âœ… Proje YÃ¶neticisi analizini tamamladÄ±.\n")
        
        # UX TasarÄ±mcÄ±'nÄ±n gÃ¶rÃ¼ÅŸÃ¼nÃ¼ al
        print("ğŸ”„ UX TasarÄ±mcÄ±sÄ± analiz yapÄ±yor...")
        ux_prompt = f"""
        Proje AÃ§Ä±klamasÄ±:
        {project_description}
        
        Proje YÃ¶neticisi'nin GÃ¶rÃ¼ÅŸleri:
        {responses['project_manager']}
        
        LÃ¼tfen bu proje iÃ§in detaylÄ± bir UX/UI tasarÄ±m stratejisi oluÅŸturun.
        """
        responses['ux_designer'] = self.ux_designer.query(ux_prompt)
        print("âœ… UX TasarÄ±mcÄ±sÄ± analizini tamamladÄ±.\n")
        
        # YazÄ±lÄ±m MimarÄ±'nÄ±n gÃ¶rÃ¼ÅŸÃ¼nÃ¼ al
        print("ğŸ”„ YazÄ±lÄ±m MimarÄ± analiz yapÄ±yor...")
        arch_prompt = f"""
        Proje AÃ§Ä±klamasÄ±:
        {project_description}
        
        Proje YÃ¶neticisi'nin GÃ¶rÃ¼ÅŸleri:
        {responses['project_manager']}
        
        UX TasarÄ±mcÄ±sÄ±'nÄ±n GÃ¶rÃ¼ÅŸleri:
        {responses['ux_designer']}
        
        LÃ¼tfen bu proje iÃ§in detaylÄ± bir teknik mimari planÄ± oluÅŸturun.
        """
        responses['software_architect'] = self.software_architect.query(arch_prompt)
        print("âœ… YazÄ±lÄ±m MimarÄ± analizini tamamladÄ±.")
        
        return responses
    
    def generate_executive_summary(self, project_description: str, responses: Dict[str, str]) -> str:
        """
        Ekip lideri tarafÄ±ndan bir yÃ¶netici Ã¶zeti oluÅŸturur.
        
        Args:
            project_description: Proje aÃ§Ä±klamasÄ±
            responses: DiÄŸer ajanlarÄ±n yanÄ±tlarÄ±
            
        Returns:
            Ekip liderinin Ã¶zet yanÄ±tÄ±
        """
        if not self.team_leader:
            raise Exception("Ekip lideri ajanÄ± baÅŸlatÄ±lmadÄ±.")
        
        print("\nğŸ”„ Ekip Lideri yÃ¶netici Ã¶zeti hazÄ±rlÄ±yor...")
        
        team_leader_prompt = f"""
        Proje AÃ§Ä±klamasÄ±:
        {project_description}
        
        Proje YÃ¶neticisi'nin Raporu:
        {responses['project_manager']}
        
        UX TasarÄ±mcÄ±sÄ±'nÄ±n Raporu:
        {responses['ux_designer']}
        
        YazÄ±lÄ±m MimarÄ±'nÄ±n Raporu:
        {responses['software_architect']}
        
        LÃ¼tfen bu proje iÃ§in tÃ¼m uzmanlarÄ±n gÃ¶rÃ¼ÅŸlerini dikkate alarak kapsamlÄ± bir yÃ¶netici Ã¶zeti oluÅŸturun.
        """
        
        response = self.team_leader.query(team_leader_prompt)
        print("âœ… YÃ¶netici Ã¶zeti hazÄ±rlandÄ±.")
        
        # YanÄ±t string deÄŸilse string'e dÃ¶nÃ¼ÅŸtÃ¼r
        if not isinstance(response, str):
            response = str(response)
            
        return response 